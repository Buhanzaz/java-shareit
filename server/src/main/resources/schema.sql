DROP TABLE IF EXISTS public.item_request cascade ;
DROP TABLE IF EXISTS public.bookings cascade;
DROP TABLE IF EXISTS public.comments cascade;
DROP TABLE IF EXISTS public.items cascade;
DROP TABLE IF EXISTS public.users cascade;

create table public.bookings (
                                 id bigint generated by default as identity,
                                 end_booking timestamp not null,
                                 start_booking timestamp not null,
                                 status varchar(255),
                                 booker_id bigint not null,
                                 item_id bigint not null,
                                 primary key (id)
);

create index BOOKER_ID_START_END_TIME_INDEX on bookings (booker_id, end_booking, start_booking);
create index BOOKER_ID_END_TIME_INDEX on bookings (booker_id, end_booking);
create index BOOKER_ID_START_TIME_INDEX on bookings (booker_id, start_booking);
create index BOOKER_ID_START_TIME_AND_STATUS_INDEX on bookings (booker_id, start_booking, status);
create index BOOKER_ID_STATUS_INDEX on bookings (booker_id, status);
create index ITEM_ID_BOOKER_ID_STATUS_END_TIME_INDEX on bookings (item_id, booker_id, status, end_booking);

create table public.comments (
                                 id bigint generated by default as identity,
                                 created timestamp,
                                 text varchar(255) not null,
                                 author_id bigint,
                                 item_id bigint,
                                 primary key (id)
);

create index AUTHOR_ID_INDEX on comments (author_id);

create table public.item_request (
                                     id bigint generated by default as identity,
                                     created_time timestamp,
                                     description varchar(255),
                                     creator_id bigint,
                                     primary key (id)
);

create index CREATOR_ID_INDEX on item_request (creator_id);

create table public.items (
                              id bigint generated by default as identity,
                              available boolean,
                              description varchar(255) not null,
                              name varchar(255) not null,
                              request_id bigint,
                              owner_id bigint,
                              primary key (id)
);

create index USER_ID_INDEX on items (owner_id);

create table public.users (
                              id bigint generated by default as identity,
                              email varchar(255),
                              name varchar(255),
                              primary key (id)
);

alter table if exists public.users
    add constraint UK_EMAIL_USERS unique (email);

alter table if exists public.bookings
    add constraint FK_BOOKER_ID
        foreign key (booker_id)
            references public.users;

alter table if exists public.bookings
    add constraint FK_ITEM_ID_FOR_BOOKINGS
        foreign key (item_id)
            references public.items;

alter table if exists public.comments
    add constraint FK_AUTHOR_ID
        foreign key (author_id)
            references public.users;

alter table if exists public.comments
    add constraint FK_ITEM_ID_FOR_COMMENTS
        foreign key (item_id)
            references public.items;

alter table if exists public.item_request
    add constraint FK_CREATOR_ID
        foreign key (creator_id)
            references public.users;

alter table if exists public.items
    add constraint FK_OWNER_ID
        foreign key (owner_id)
            references public.users;

alter table if exists public.items
    add constraint FK_REQUEST_ID
        foreign key (request_id)
            references public.item_request;